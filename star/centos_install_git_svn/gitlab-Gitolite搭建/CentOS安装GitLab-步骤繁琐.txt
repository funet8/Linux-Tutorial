CentOS安装GitLab
参考地址：
http://www.centoscn.com/image-text/install/2015/0320/4929.html


1.yum源 
为了提高软件安装速度，将yum源设置为阿里云开源镜像
[root@localhost ~]# cd /etc/yum.repos.d
[root@localhost ~]# wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo 

2.必要软件包
[root@localhost ~]# yum -y install libicu-devel patch gcc-c++ readline-devel zlib-devel libffi-devel openssl-devel make autoconf automake libtool bison libxml2-devel libxslt-devel libyaml-devel zlib-devel openssl-devel cpio expat-devel gettext-devel curl-devel perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker 

3.安装Git
	// 查看当前git版本
[root@localhost ~]# git --version

	// 如果小于1.7.10则先卸载
[root@localhost ~]# yum remove git

	// 下载最新的git并安装
[root@localhost ~]# wget -O git-src.zip https://github.com/git/git/archive/master.zip
[root@localhost ~]# unzip git-src.zip

	unzip命令无法找到解决方法：
	[root@localhost ~]# unzip git-src.zip
	-bash: unzip: command not found
	[root@localhost ~]# yum install -y unzip zip

[root@localhost ~]# cd git-master/
[root@localhost ~]# make prefix=/usr/local all
[root@localhost ~]# make prefix=/usr/local install
[root@localhost ~]# ln -fs /usr/local/bin/git* /usr/bin/ 

4.安装Ruby环境
[root@localhost ~]# mkdir /tmp/ruby && cd /tmp/ruby
[root@localhost ~]# curl --progress ftp://ftp.ruby-lang.org/pub/ruby/ruby-2.1.5.tar.gz | tar xz
	或者下载文件：ftp://ftp.ruby-lang.org/pub/ruby/ruby-2.1.5.tar.gz上传到服务器上
[root@localhost ~]# tar -zxvf ruby-2.1.5.tar.gz 
[root@localhost ~]# cd ruby-2.1.5
[root@localhost ~]# ./configure --disable-install-rdoc
[root@localhost ~]# make && make install

[root@localhost ~]# ln -s /usr/local/bin/ruby /usr/bin/ruby
[root@localhost ~]# ln -s /usr/local/bin/gem /usr/bin/gem
[root@localhost ~]# ln -s /usr/local/bin/bundle /usr/bin/bundle

	// 设置ruby gem源为淘宝
[root@localhost ~]# gem source -r https://rubygems.org/
[root@localhost ~]# gem source -a https://ruby.taobao.org/
	或者gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/

[root@localhost ~]# gem sources -l		【查看gem】
*** CURRENT SOURCES ***
https://ruby.taobao.org/

[root@localhost ~]# gem install bundler --no-ri --no-rdoc 


5.安装MySQL及初始化GitLab库
[root@localhost ~]# yum install -y mysql mysql-devel mysql-server 
[root@localhost ~]# /etc/init.d/mysqld start
[root@localhost ~]# chkconfig mysqld on
[root@localhost ~]# mysql

	// 登录mysql创建gitab的帐号和数据库
mysql> CREATE USER 'gitlab'@'localhost' IDENTIFIED BY 'gitlab';
mysql> CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;
mysql> GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlabhq_production`.* TO 'gitlab'@'localhost';
mysql> exit

[root@localhost ~]# useradd git
[root@localhost ~]# su -l git

	//测试是否可以用git帐号登录数据库
[git@localhost ~]$ mysql -u gitlab -p -D gitlabhq_production
[git@localhost ~]$ exit

6.安装Redis
[root@localhost ~]# yum -y install redis

	遇到错误：
	[root@localhost ~]# yum -y install redis
	Loaded plugins: fastestmirror
	Loading mirror speeds from cached hostfile
	 * base: mirrors.aliyun.com
	 * extras: mirrors.aliyun.com
	 * updates: mirrors.aliyun.com
	Setting up Install Process
	No package redis available.
	Error: Nothing to do
    解决参考：http://www.laozuo.org/5755.html
[root@localhost ~]# wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
[root@localhost ~]# rpm -ivh epel-release-6-8.noarch.rpm
[root@localhost ~]# yum install redis
	
 
[root@localhost ~]# /etc/init.d/redis start
[root@localhost ~]# chkconfig redis on 
添加git帐号并允许sudo
[root@localhost ~]# useradd --comment 'GitLab' git
[root@localhost ~]# echo "git ALL=(ALL)       NOPASSWD: ALL" >>/etc/sudoers 

7.安装GitLab
[root@localhost ~]# su -l git
[git@localhost ~]$ git clone https://gitlab.com/gitlab-org/gitlab-ce.git -b 7-8-stable gitlab
[git@localhost ~]$ cd /home/git/gitlab
[git@localhost ~]$ cp /home/git/gitlab/config/gitlab.yml.example /home/git/gitlab/config/gitlab.yml

	// 编辑git路径, gitlab的host:port
[git@localhost ~]$ vim /home/git/gitlab/config/gitlab.yml
	// bin_path: /usr/local/bin/git
	// host: localhost
	// port: 80 

	// 给文件夹添加相应的权限
[git@localhost ~]$ chown -R git /home/git/gitlab/log/
[git@localhost ~]$ chown -R git /home/git/gitlab/tmp/
[git@localhost ~]$ chmod -R u+rwX  /home/git/gitlab/log/
[git@localhost ~]$ chmod -R u+rwX  /home/git/gitlab/tmp/

	// 创建必要的文件夹，以及复制配置文件
[git@localhost ~]$ mkdir /home/git/gitlab-satellites
[git@localhost ~]$ mkdir /home/git/gitlab/tmp/pids/
[git@localhost ~]$ mkdir /home/git/gitlab/tmp/sockets/
[git@localhost ~]$ chmod -R u+rwX  /home/git/gitlab/tmp/pids/
[git@localhost ~]$ chmod -R u+rwX  /home/git/gitlab/tmp/sockets/
[git@localhost ~]$ mkdir /home/git/gitlab/public/uploads
[git@localhost ~]$ chmod -R u+rwX  /home/git/gitlab/public/uploads
[git@localhost ~]$ cp /home/git/gitlab/config/unicorn.rb.example /home/git/gitlab/config/unicorn.rb
[git@localhost ~]$ cp /home/git/gitlab/config/initializers/rack_attack.rb.example /home/git/gitlab/config/initializers/rack_attack.rb

	// 配置数据库连接信息
[git@localhost ~]$ cp /home/git/gitlab/config/database.yml.mysql /home/git/gitlab/config/database.yml
[git@localhost ~]$ vim /home/git/gitlab/config/database.yml
	// production:
	//     username: gitlab
	//     password: "gitlab"
	
8.安装GitLab-Shell
[git@localhost ~]$ cd /home/git
[git@localhost ~]$ git clone https://gitlab.com/gitlab-org/gitlab-shell.git -b v2.6.0
[git@localhost ~]$ cd /home/git/gitlab-shell/
[git@localhost ~]$ cp /home/git/gitlab-shell/config.yml.example /home/git/gitlab-shell/config.yml

// 编辑配置文件, 设置gitlab_url, redis-cli, log-level...
[git@localhost ~]$ vim config.yml
	// gitlab_url: "http://localhost/"
	// /usr/bin/redis-cli

// 安装git-shell
[git@localhost ~]$ /home/git/gitlab-shell/bin/install 

9.安装需要ruby的gems
[git@localhost ~]$ cd /home/git/gitlab
[git@localhost gitlab]$ bundle install --deployment --without development test postgres aws 

10.初始化数据库(创建GitLab相关表)
[git@localhost gitlab]$ bundle exec rake gitlab:setup RAILS_ENV=production

11.安装启动文件以及日志切割文件
[git@localhost ~]$ exit
[root@localhost ~]# cp /home/git/gitlab/lib/support/init.d/gitlab /etc/init.d/gitlab
[root@localhost ~]# cp /home/git/gitlab/lib/support/init.d/gitlab.default.example /etc/default/gitlab
[root@localhost ~]# cp /home/git/gitlab/lib/support/logrotate/gitlab /etc/logrotate.d/gitlab 

12.设置git帐号信息
[root@localhost ~]# su -l git
[git@localhost ~]$ git config --global user.name "liuxingxing"
[git@localhost ~]$ git config --global user.email "funet8@163.com"
[git@localhost ~]$ git config --global core.autocrlf input 

13.安装Nginx
[git@localhost ~]$ exit
[root@localhost ~]# yum -y install nginx
[root@localhost ~]# vim /etc/nginx/nginx.conf
user              root git;
worker_processes  2;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
# GITLAB
# Maintainer: @randx
# App Version: 5.0

upstream gitlab {
  server unix:/home/git/gitlab/tmp/sockets/gitlab.socket;
}

server {
  listen *:80 default_server;         # e.g., listen 192.168.1.1:80; In most cases *:80 is a good idea
  server_name YOUR_SERVER_FQDN;     # e.g., server_name source.example.com;
  server_tokens off;     # don't show the version number, a security best practice
  root /home/git/gitlab/public;

  # Set value of client_max_body_size to at least the value of git.max_size in gitlab.yml
  client_max_body_size 5m;

  # individual nginx logs for this gitlab vhost
  access_log  /var/log/nginx/gitlab_access.log;
  error_log   /var/log/nginx/gitlab_error.log;

  location / {
    # serve static files from defined root folder;.
    # @gitlab is a named location for the upstream fallback, see below
    try_files $uri $uri/index.html $uri.html @gitlab;
  }

  # if a file, which is not found in the root folder is requested,
  # then the proxy pass the request to the upsteam (gitlab unicorn)
  location @gitlab {
    proxy_read_timeout 300; # https://github.com/gitlabhq/gitlabhq/issues/694
    proxy_connect_timeout 300; # https://github.com/gitlabhq/gitlabhq/issues/694
    proxy_redirect     off;

    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_set_header   Host              $http_host;
    proxy_set_header   X-Real-IP         $remote_addr;
    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;

    proxy_pass http://gitlab;
  }
}
} 
13.更改权限，启动nginx
[root@localhost ~]# nginx -t
[root@localhost ~]# chown -R git:git /var/lib/nginx/
[root@localhost ~]# /etc/init.d/nginx start

检测当前环境
[root@localhost ~]# su -l git
[git@localhost ~]$ bundle exec rake gitlab:env:info RAILS_ENV=production
拉取gitlab静态资源文件
[git@localhost ~]$ bundle exec rake assets:precompile RAILS_ENV=production 

启动gitlab
[git@localhost ~]$ /etc/init.d/gitlab start 

[git@localhost ~]$ /etc/init.d/gitlab start 
Starting both the GitLab Unicorn and Sidekiq..............................Waited 30s for the processes to write their pids, something probably went wrong.

apache报错记录：
2015/12/23 19:24:10 [error] 3980#0: *1 connect() to unix:/home/git/gitlab/tmp/sockets/gitlab.socket failed (111: Connection refused) while connecting to upstream, client: 192.168.1.251, server: your_server_fqdn, request: "GET / HTTP/1.1", upstream: "http://unix:/home/git/gitlab/tmp/sockets/gitlab.socket:/", host: "192.168.1.243"


检测各个组件是否正常工作
 $ sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production